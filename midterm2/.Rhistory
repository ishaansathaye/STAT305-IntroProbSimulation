# Setup global options
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# set seed
set.seed(123)
x <- rnorm(10000, mean = 10, sd = 5)
hist(x, main = "Histogram of x ~ N(10, 5)", xlab = "x", col = "lightblue", border = "white")
z <- (x-10) / 5
z
z <- (x-10) / 5
z.head()
z <- (x-10) / 5
z[5]
z <- (x-10) / 5
hist(z, probability = TRUE,
main = "Relative Frequency Histogram of Standardized x (z)",
xlab = "z",
col = "lightgreen",
border = "white")
hist(z, probability = TRUE,
main = "Relative Frequency Histogram of Standardized x (z)",
xlab = "z",
col = "lightgreen",
border = "white")
# adding normal curve to show that it does follow a standard normal dist
curve(dbnorm(x),
add = TRUE,
col = "red",
lwd = 2)
hist(z, probability = TRUE,
main = "Relative Frequency Histogram of Standardized x (z)",
xlab = "z",
col = "lightgreen",
border = "white")
# adding normal curve to show that it does follow a standard normal dist
curve(dnorm(x),
add = TRUE,
col = "red",
lwd = 2)
# A safe upper bound for maximum number of customers within an hour
upper <- 1000
y <- numeric(upper)  # Empty vector to store inter-arrival times
count <- 0  # Counter for number of arrivals
for (i in 1:upper) {
y[i] <- rexp(1, rate = 20/60)  # Generate an inter-arrival time (in minutes)
if (sum(y[1:i]) >= 60) {  # If total time exceeds or equals 60 minutes, exit the loop
break
} else {
count <- i  # Record the current number of arrivals
}
}
# 'count' now represents the number of customers that arrived within 60 minutes.
count
# A safe upper bound for maximum number of customers within an hour
upper <- 1000
y <- numeric(upper)  # Empty vector to store inter-arrival times
count <- 0  # Counter for number of arrivals
for (i in 1:upper) {
y[i] <- rexp(1, rate = 20/60)  # Generate an inter-arrival time (in minutes)
if (sum(y[1:i]) >= 60) {  # If total time exceeds or equals 60 minutes, exit the loop
break
} else {
count <- i  # Record the current number of arrivals
}
}
# 'count' now represents the number of customers that arrived within 60 minutes.
count
set.seed(1)
n_sim <- 100000  # Number of simulations
x_sim <- numeric(n_sim)
for (j in 1:n_sim) {
upper <- 1000  # Safe upper bound
y <- numeric(upper)
count <- 0
for (i in 1:upper) {
y[i] <- rexp(1, rate = 20/60)
if (sum(y[1:i]) >= 60) {
break
} else {
count <- i
}
}
x_sim[j] <- count
}
# Check the first few simulated values
head(x_sim)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "lightblue",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph: vertical lines and points
segments(x_vals, 0, x_vals, pois_pmf, col = "red", lwd = 2)
points(x_vals, pois_pmf, col = "red", pch = 16)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "blue",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph: vertical lines and points
segments(x_vals, 0, x_vals, pois_pmf, col = "red", lwd = 2)
points(x_vals, pois_pmf, col = "red", pch = 16)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "black",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph: vertical lines and points
segments(x_vals, 0, x_vals, pois_pmf, col = "red", lwd = 2)
points(x_vals, pois_pmf, col = "red", pch = 16)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "grey",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph: vertical lines and points
segments(x_vals, 0, x_vals, pois_pmf, col = "red", lwd = 2)
points(x_vals, pois_pmf, col = "red", pch = 16)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "red",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph: vertical lines and points
segments(x_vals, 0, x_vals, pois_pmf, col = "blue", lwd = 2)
points(x_vals, pois_pmf, col = "blue", pch = 16)
# Calculate sample mean and variance from the simulation
sim_mean <- mean(x_sim)
sim_variance <- var(x_sim)
# Theoretical mean and variance for Poisson(20)
theoretical_mean <- 20
theoretical_variance <- 20
# Display the results
print("Simulated Mean:", sim_mean, "\n")
# Sample mean and variance from the simulation
sim_mean <- mean(x_sim)
sim_variance <- var(x_sim)
# Theoretical mean and variance for Poisson(20)
theoretical_mean <- 20
theoretical_variance <- 20
cat("Simulated Mean:", sim_mean, "\n")
cat("Theoretical Mean:", theoretical_mean, "\n\n")
cat("Simulated Variance:", sim_variance, "\n")
cat("Theoretical Variance:", theoretical_variance, "\n")
# set seed
set.seed(123)
x <- rnorm(10000, mean = 10, sd = 5)
head(x)
# Setup global options
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# set seed
set.seed(123)
x <- rnorm(10000, mean = 10, sd = 5)
head(x)
hist(x,
main = "Histogram of x ~ N(10, 5)",
xlab = "x",
col = "lightblue",
border = "white")
z <- (x-10) / 5
head(z)
hist(z, probability = TRUE,
main = "Relative Frequency Histogram of Standardized x (z)",
xlab = "z",
col = "lightgreen",
border = "white")
# adding normal curve to show that it does follow a standard normal dist
curve(dnorm(x),
add = TRUE,
col = "red",
lwd = 2)
# A safe upper bound for maximum number of customers within an hour
upper <- 1000
y <- numeric(upper)  # Empty vector to store inter-arrival times
count <- 0  # Counter for number of arrivals
for (i in 1:upper) {
y[i] <- rexp(1, rate = 20/60)  # Generate an inter-arrival time (in minutes)
if (sum(y[1:i]) >= 60) {  # If total time exceeds or equals 60 minutes, exit the loop
break
} else {
count <- i  # Record the current number of arrivals
}
}
# 'count' now represents the number of customers that arrived within 60 minutes.
count
set.seed(1)
n_sim <- 100000  # Number of simulations
x_sim <- numeric(n_sim)
for (j in 1:n_sim) {
upper <- 1000  # Safe upper bound
y <- numeric(upper)
count <- 0
for (i in 1:upper) {
y[i] <- rexp(1, rate = 20/60)
if (sum(y[1:i]) >= 60) {
break
} else {
count <- i
}
}
x_sim[j] <- count
}
# Check the first few simulated values
head(x_sim)
# Histogram with bins centered at integers from 0 to 50
hist(x_sim,
breaks = seq(-0.5, 50.5, by = 1),
probability = TRUE,
xlim = c(0, 50),
main = "Relative Frequency Histogram of Hourly Customer Arrivals",
xlab = "Number of Customers",
col = "red",
border = "white")
# Compute the Poisson(20) PMF
x_vals <- 0:50
pois_pmf <- dpois(x_vals, lambda = 20)
# Overlay the PMF as a lollipop graph
segments(x_vals, 0, x_vals, pois_pmf, col = "blue", lwd = 2)
points(x_vals, pois_pmf, col = "blue", pch = 16)
# Sample mean and variance from the simulation
sim_mean <- mean(x_sim)
sim_variance <- var(x_sim)
# Theoretical mean and variance for Poisson(20)
theoretical_mean <- 20
theoretical_variance <- 20
cat("Simulated Mean:", sim_mean, "\n")
cat("Theoretical Mean:", theoretical_mean, "\n\n")
cat("Simulated Variance:", sim_variance, "\n")
cat("Theoretical Variance:", theoretical_variance, "\n")
